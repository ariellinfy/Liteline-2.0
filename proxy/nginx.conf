# /etc/nginx/nginx.conf
worker_processes 1;

events {
    worker_connections 512;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    tcp_nopush    on;
    tcp_nodelay   on;
    keepalive_timeout 65s;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" "$host"';
    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log warn;

    # Gzip (safe defaults)
    gzip on;
    gzip_types text/plain text/css application/json application/javascript application/xml text/javascript;
    gzip_min_length 1024;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=socket:10m rate=5r/s;

    # DNS resolver is required when proxy_pass uses variables
    resolver 1.1.1.1 8.8.8.8 valid=300s;
    resolver_timeout 10s;

    # split traffic; change the key to suit (e.g., $remote_addr for sticky by IP)
    split_clients $remote_addr $render_host {
        50% liteline-2-0-api-i.onrender.com;
        *   liteline-2-0-api-ii.onrender.com;
    }

    # --- Upstream backends (HTTPS on Render) ---
    # upstream backend {
    #     least_conn;
    #     keepalive 64;
    #     # Each backend is an HTTPS origin
    #     server liteline-2-0-api-i.onrender.com:443 max_fails=3 fail_timeout=30s;
    #     server liteline-2-0-api-ii.onrender.com:443 max_fails=3 fail_timeout=30s;
    # }

    # ----- CORS: allow your Vercel app + localhost dev -----
    # Add more origins if you deploy a custom domain later.
    map $http_origin $cors_allow_origin {
        default "";
        "~^https?://liteline-nova\.vercel\.app$" $http_origin;
        "~^http://localhost(:\d+)?$" $http_origin;
        "~^https://localhost(:\d+)?$" $http_origin;
    }

    # Common proxy headers
    map $http_upgrade $connection_upgrade {
        default "upgrade";
        ""      "close";
    }

    # --- HTTP: redirect to HTTPS for your hostname
    server {
        listen 80;
        server_name api-liteline-nova.me;

        # Optional: keep health on HTTP if you like
        location = /health { 
            access_log off; 
            return 200 "healthy\n"; 
        }

        return 301 https://$host$request_uri;
    }

    # ---------------- HTTPS server (port 443) ----------------
    server {
        listen 443 ssl http2;
        server_name api-liteline-nova.me;

        # Use the certbot files it printed:
        ssl_certificate     /etc/letsencrypt/live/api-liteline-nova.me/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api-liteline-nova.me/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Preserve client/forwarded info
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Default root - optional
        location = / {
            return 200 "OK\n";
        }

        # Health check for the proxy itself
        location = /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "healthy\n";
        }

        # --------- API (HTTP/1.1 proxied to HTTPS upstream) ---------
        location ^~ /api/ {
            # CORS (refined: only when origin matches whitelisted)
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin $cors_allow_origin always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Allow-Headers "*" always;
                add_header Access-Control-Allow-Methods "GET,POST,PUT,PATCH,DELETE,OPTIONS" always;
                add_header Access-Control-Max-Age 1728000 always;
                return 204;
            }
            add_header Access-Control-Allow-Origin $cors_allow_origin always;
            add_header Access-Control-Allow-Credentials "true" always;

            limit_req zone=api burst=20 nodelay;

            # Proxy to the load-balanced HTTPS upstream
            proxy_pass https://$render_host;
            proxy_http_version 1.1;

            # Upstream TLS with correct SNI + verification against that host
            proxy_ssl_server_name on;
            proxy_ssl_name $render_host;
            proxy_ssl_verify on;
            proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

            proxy_redirect off;
            proxy_buffering on;

            # Upstream routing: use the same host in the Host header
            proxy_set_header Host $render_host;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout    60s;
            proxy_read_timeout    60s;

            # Optional: cache bypass for upgrades
            proxy_cache_bypass $http_upgrade;

            # Optional retries if a host is down
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
        }

        # ------------- Socket.IO / WebSockets ----------------
        location ^~ /socket.io/ {
            # CORS (refined: only when origin matches whitelisted)
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin $cors_allow_origin always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Allow-Headers "*" always;
                add_header Access-Control-Allow-Methods "GET,POST,PUT,PATCH,DELETE,OPTIONS" always;
                add_header Access-Control-Max-Age 1728000 always;
                return 204;
            }
            add_header Access-Control-Allow-Origin $cors_allow_origin always;
            add_header Access-Control-Allow-Credentials "true" always;

            limit_req zone=socket burst=10 nodelay;

            proxy_pass https://$render_host;
            proxy_http_version 1.1;

            # WebSocket headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # TLS + verification against the *chosen* host
            proxy_ssl_server_name on;
            proxy_ssl_name $render_host;
            proxy_ssl_verify on;
            proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;

            proxy_redirect off;
            proxy_buffering off;

            # Upstream routing: use the same host in the Host header
            proxy_set_header Host $render_host;

            # Long-lived timeouts for WS
            proxy_connect_timeout 7d;
            proxy_send_timeout    7d;
            proxy_read_timeout    7d;

            # Passive health/retries
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
        }

        # Backend health probe passthrough (optional)
        location = /api/health {
            access_log off;
            proxy_pass https://$render_host/health;
            proxy_ssl_server_name on;
            proxy_ssl_name $render_host;
            proxy_ssl_verify on;
            proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
            proxy_set_header Host $render_host;
        }
    }
}
